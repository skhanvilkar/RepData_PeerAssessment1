subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# calling the basic plot functions
plot(subDataPower$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
# annotating graph
title(main="Energy sub-metering")
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot3.png")
dev.off()
dev.set()
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# calling the basic plot function
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",xlab="",ylab="Global Active Power (kilowatts)")
title(main="Global Active Power Vs Time") # annotating graph
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot2.png")
dev.off()
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# calling the basic plot function
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",xlab="",ylab="Global Active Power (kilowatts)")
title(main="Global Active Power Vs Time") # annotating graph
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot2.png")
dev.off()
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# calling the basic plot function
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",xlab="",ylab="Global Active Power (kilowatts)")
title(main="Global Active Power Vs Time") # annotating graph
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot2.png")
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPowerr$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPowerr$Time,subpower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPowerr$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPowerr$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
setwd("C:\Users\skhanvilkar")
if(!file.exists("./EDAQ1")){dir.create("./EDAQ1")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl,destfile="./EDAQ1/powerconsumption.zip")
unzip(zipfile="./EDAQ1/powerconsumption.zip",exdir="./EDAQ1")
path_rf <- file.path("./EDAQ1")
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPowerr$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPowerr$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
setwd("C:\Users\skhanvilkar")
if(!file.exists("./EDAQ1")){dir.create("./EDAQ1")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl,destfile="./EDAQ1/powerconsumption.zip")
unzip(zipfile="./EDAQ1/powerconsumption.zip",exdir="./EDAQ1")
path_rf <- file.path("./EDAQ1")
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPowerr$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPower$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
with(subDataPower,{
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPower$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPower$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPower$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot4.png")
setwd("C:\Users\skhanvilkar")
if(!file.exists("./EDAQ1")){dir.create("./EDAQ1")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl,destfile="./EDAQ1/powerconsumption.zip")
unzip(zipfile="./EDAQ1/powerconsumption.zip",exdir="./EDAQ1")
path_rf <- file.path("./EDAQ1")
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption)
head(dataPowerConsumption,10)
##View(dataPowerConsumtion)
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
##View(subDataPower)
hist(as.numeric(as.character(subDataPower$Global_active_power)),col="red",main="Global Active Power",xlab="Global Active Power(kilowatts)")
##rug(as.numeric(as.character(subDataPower$Global_active_power)))
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot1.png")
dataPowerConsumption <- read.table(file.path(path_rf, "household_power_consumption.txt"),skip=1,sep=";")
names(dataPowerConsumption) <- c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage",
"Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
subDataPower <- subset(dataPowerConsumption,dataPowerConsumption$Date=="1/2/2007" | dataPowerConsumption$Date =="2/2/2007")
# Transforming the Date and Time vars from characters into objects of type Date and POSIXlt respectively
subDataPower$Date <- as.Date(subDataPower$Date, format="%d/%m/%Y")
subDataPower$Time <- strptime(subDataPower$Time, format="%H:%M:%S")
subDataPower[1:1440,"Time"] <- format(subDataPower[1:1440,"Time"],"2007-02-01 %H:%M:%S")
subDataPower[1441:2880,"Time"] <- format(subDataPower[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
# initiating a composite plot with many graphs
par(mfrow=c(2,2))
# calling the basic plot function that calls different plot functions to build the 4 plots that form the graph
with(subDataPower,{
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_active_power)),type="l",  xlab="",ylab="Global Active Power")
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Voltage)), type="l",xlab="datetime",ylab="Voltage")
plot(subDataPower$Time,subDataPower$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_1))))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_2)),col="red"))
with(subDataPower,lines(Time,as.numeric(as.character(Sub_metering_3)),col="blue"))
legend("topright", lty=1, col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), cex = 0.6)
plot(subDataPower$Time,as.numeric(as.character(subDataPower$Global_reactive_power)),type="l",xlab="datetime",ylab="Global_reactive_power")
})
dev.copy(png, file = "C:/Users/skhanvilkar/EDAQ1/plot4.png")
git merged --
xyplot(Ozone ~ Wind , data = airquality)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind , data = airquality)
head(airquality,10)
airquality <- transform(airquality, Month = factor(Month))
xyplot (Ozone ~ Wind | Month, data = airquality | layout = c(5,1))
xyplot (Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind , data = airquality)
print(p)
library(ggplot2)
str(mpg)
head(mpg,10)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(hwy, data = mpg, fill = drv)
library(ggplot2)
str(mpg)
head(mpg,10)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, facets = . ~ drv)
str(maacs)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(plot)
xyplot(weight ~ Time | Diet, BodyWeight)
class(plot)
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="ChiRho1417",extended_permissions = TRUE)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
load("fb_oauth")
install.packages("devtools")
me <- getUsers("me",token=fb_oauth)
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
load("fb_oauth")
me <- getUsers("me",token=fb_oauth)
install.packages("devtools")
me <- getUsers("me",token=fb_oauth)
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="ChiRho",extended_permissions = TRUE)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me",token=fb_oauth)
load("fb_oauth")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
load("fb_oauth")
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
install.packages("devtools")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require (Rfacebook)
fb_oauth <- fbOAuth(app_id="134777824021554", app_secret="c9ed24c21f57c6e0e186d254031f9082",extended_permissions = TRUE)
load("C:/Users/skhanvilkar/Desktop/John Hopkins Data Science Certification/.RData")
install.packages("XML")
library(XML)
library(RCurl)
library(dplyr)
fileXML <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml" ## remove s from https
doc <- xmlTreeParse(fileXML,useInternal = TRUE) ## loads the document in R Use Internal allows to include all the nodes
# using RCurl, can leave https.  Use getURL first, then parse with xmlParse
xData <- getURL(fileXML) # This allows you to use https
doc <- xmlParse(xData)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[4]][[4]]                      ## Details out 4th Restaurand - Details out all variables of 4th Restaurant
rootNode[[1]][[4]][[1]][[1]]            ## Details out 4th Restaurant Name
rootNode[[1]][[4]][[2]][[1]]            ## Details out 4th Restaurant Zip Code
rootNode[[1]][[4]][[3]][[1]]            ## Details out 4th Restaurant Neighborhood
rootNode[[1]][[4]][[4]][[1]]            ## Details out 4th Restaurant Council District
rootNode[[1]][[4]][[5]][[1]]             ## Details out 4th Restaurant Police District
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//neighborhood", xmlValue)
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "SOUTHERN")
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "SOUTHEASTERN")
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "WESTERN")
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "EASTERN")
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "CENTRAL")
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "NORTHERN")
sum(xpathSApply(rootNode, "//policedistrict", xmlValue) == "NORTHEASTERN")
#xmlName(rootNode) # just displays top root node name
# one version, no data frame required - no need for zips, zips_dt
sum(xpathSApply(rootNode, "//zipcode", xmlValue) == "21231")
install.packages("XML")
library(XML)
library(RCurl)
library(dplyr)
fileXML <- "http://api.walmartlabs.com/v1/stores?apiKey={apiKey}&city=HOUSTON&format=json"
install.packages("XML")
fileXML <- "http://api.walmartlabs.com/v1/stores?apiKey={apiKey}&city=HOUSTON&format=json"
doc <- xmlTreeParse(fileXML,useInternal = TRUE) ## loads the document in R Use Internal allows to include all the nodes
# using RCurl, can leave https.  Use getURL first, then parse with xmlParse
xData <- getURL(fileXML) # This allows you to use https
doc <- xmlParse(xData)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[4]][[4]]                      ## Details out 4th Restaurand - Details out all variables of 4th Restaurant
rootNode[[1]][[4]][[1]][[1]]            ## Details out 4th Restaurant Name
rootNode[[1]][[4]][[2]][[1]]            ## Details out 4th Restaurant Zip Code
rootNode[[1]][[4]][[3]][[1]]            ## Details out 4th Restaurant Neighborhood
rootNode[[1]][[4]][[4]][[1]]            ## Details out 4th Restaurant Council District
rootNode[[1]][[4]][[5]][[1]]             ## Details o
fileXML <- "http://api.walmartlabs.com/v1/stores?apiKey={apiKey}&zip=77063&format=json" ## r
doc <- xmlTreeParse(fileXML,useInternal = TRUE)
fileXML <- "http://api.walmartlabs.com/v1/stores?format=xml&apiKey=store+locator" ## remove s from https
doc <- xmlTreeParse(fileXML,useInternal = TRUE) ## loads the document in R Use Internal allows
install.packages("XML")
library(XML)
library(RCurl)
library(dplyr)
fileXML <- "http://api.walmartlabs.com/v1/stores?format=json&apiKey=store+locator" ## remove s from https
doc <- xmlTreeParse(fileXML,useInternal = TRUE) ## loads the document in R Use Internal allows to include all the nodes
# using RCurl, can leave https.  Use getURL first, then parse with xmlParse
xData <- getURL(fileXML) # This allows you to use https
doc <- xmlParse(xData)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
install.packages("XML")
fileXML <- "http://api.walmartlabs.com/v1/stores?format=json&apiKey=store+locator" ## remove s from https
doc <- xmlTreeParse(fileXML,useInternal = TRUE) ## loads the document in R Use Internal allo
install.packages("pdftools")
download.file("https://github.com/Huitziii/crispy-pdf/raw/master/71_PV.62.pdf",
"./71_PV.62.pdf")
text <- pdf_text("./71_PV.62.pdf")
download.file("https://www.apqc.org/knowledge-base/download/355907/K06255_Finance%20Org%20Benchmarks_Cross%20Industry.pdf")
text <- pdf_text("./K06255_Finance%20Org%20Benchmarks_Cross%20Industry.pdf.pdf")
download.file("https://www.apqc.org/knowledge-base/download/355907/K06255_Finance%20Org%20Benchmarks_Cross%20Industry.pdf")
text <- pdf_text("./K06255_Finance%20Org%20Benchmarks_Cross%20Industry.pdf")
download.file("https://www.apqc.org/knowledge-base/download/355907/K06255_Finance%20Org%20Benchmarks_Cross%20Industry.pdf")
library(tabulizer)
library(tabulizerjars)
# Define path to PDF file
pdf.file <- "~/0-RProjects/ScrapePDF/@docs/data.pdf"
# Extract data table
pdf.dat <- extract_tables(pdf.file)
# Coerce output matrix to data.frame
pdf.tbl <- data.frame(pdf.dat[[1]][-1, ])
names(pdf.tbl) <- pdf.dat[[1]][1, ]
getwd()
pdf.file <- "C:/Users/skhanvilkar/Document/K06255_Finance Org Benchmarks_Cross Industry.pdf."
# Extract data table
pdf.dat <- extract_tables(pdf.file)
# Coerce output matrix to data.frame
pdf.tbl <- data.frame(pdf.dat[[1]][-1, ])
names(pdf.tbl) <- pdf.dat[[1]][1, ]
pdf.dat <- extract_tables(pdf.file)
library(tabulizer)
library(tabulizerjars)
# Define path to PDF file
pdf.file <- "C:/Users/skhanvilkar/Document/K06255_Finance Org Benchmarks_Cross Industry.pdf."
# Extract data table
pdf.dat <- extract_tables(pdf.file)
# Coerce output matrix to data.frame
pdf.tbl <- data.frame(pdf.dat[[1]][-1, ])
names(pdf.tbl) <- pdf.dat[[1]][1, ]
getwd()
install.packages("pdftools")
text <- pdf_text("C:/Users/skhanvilkar/Document/K06255_Finance Org Benchmarks_Cross Industry.pdf")
text2 <- strsplit(text, "\n")
head(text2[[1]])
text2 <- strsplit(text)
head(text,30)
library(tm)
read <- readPDF(control = list(text = "-layout"))
text <- pdf_text("C:/Users/skhanvilkar/Document/K06255_Finance Org Benchmarks_Cross Industry.pdf")
load("data/face.rda")
image(t(faceData)[,nrow(faceData):1])
getwd()
setwd("C:/Users/skhanvilkar/RepData_PeerAssessment1")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", destfile = "activity.zip", mode="wb")
# unzip data and read
unzip("activity.zip")
stepdata <- read.csv("activity.csv", header = TRUE)
head(stepdata)
library(magrittr)
library(dplyr)
databydate <- stepdata %>% select(date, steps) %>% group_by(date) %>% summarize(tsteps= sum(steps)) %>%na.omit()
hist(databydate$tsteps, xlab = "Total daily Steps",main="Histogram of Total Steps by day", breaks = 20)
mean(databydate$tsteps)
library(ggplot2)
databyinterval <- stepdata%>% select(interval, steps) %>% na.omit() %>% group_by(interval) %>% summarize(tsteps= mean(steps))
ggplot(databyinterval, aes(x=interval, y=tsteps))+ geom_line()
library(ggplot2)
databyinterval <- stepdata%>% select(interval, steps) %>% na.omit() %>% group_by(interval) %>% summarize(Totalsteps= mean(steps))
ggplot(databyinterval, aes(x=interval, y=Totalsteps))+ geom_line()
databyinterval[which(databyinterval$tsteps== max(databyinterval$tsteps)),]
databyinterval[which(databyinterval$Totalsteps== max(databyinterval$Totalsteps)),]
missingVals <- sum(is.na(data))
missingVals
library(magrittr)
library(dplyr)
replacewithmean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
meandata <- stepdata%>% group_by(interval) %>% mutate(steps= replacewithmean(steps))
head(meandata)
FullSummedDataByDay <- aggregate(meandata$steps, by=list(meandata$date), sum)
names(FullSummedDataByDay)[1] ="date"
names(FullSummedDataByDay)[2] ="totalsteps"
head(FullSummedDataByDay,15)
FullSummedDataByDay <- aggregate(meandata$steps, by=list(meandata$date), sum)
names(FullSummedDataByDay)[1] ="date"
names(FullSummedDataByDay)[2] ="totalsteps"
head(FullSummedDataByDay,15)
summary(FullSummedDataByDay)
hist(FullSummedDataByDay$totalsteps, xlab = "Steps", ylab = "Frequency", main = "Total Daily Steps", breaks = 20)
oldmean <- mean(databydate$tsteps, na.rm = TRUE)
newmean <- mean(FullSummedDataByDay$totalsteps)
oldmean
newmean
meandata$date <- as.Date(meandata$date)
meandata$weekday <- weekdays(meandata$date)
meandata$weekend <- ifelse(meandata$weekday=="Saturday" | meandata$weekday=="Sunday", "Weekend", "Weekday" )
library(ggplot2)
meandataweekendweekday <- aggregate(meandata$steps , by= list(meandata$weekend, meandata$interval), na.omit(mean))
names(meandataweekendweekday) <- c("weekend", "interval", "steps")
ggplot(meandataweekendweekday, aes(x=interval, y=steps, color=weekend)) + geom_line()+
facet_grid(weekend ~.) + xlab("Interval") + ylab("Mean of Steps") +
ggtitle("Comparison of Average Number of Steps in Each Interval")
